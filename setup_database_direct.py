#!/usr/bin/env python3
"""
Script alternativo para configurar o banco de dados do SG - Servir e Gerir
Usa conex√£o direta com PostgreSQL do Supabase
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv

def setup_database():
    """Configura o banco de dados executando o script SQL via psycopg2"""
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Para Supabase, a string de conex√£o geralmente √©:
    # postgresql://postgres:[password]@db.[project-ref].supabase.co:5432/postgres
    
    # Vamos tentar diferentes abordagens para conectar
    project_ref = "ncrwipqzshwjbvxgogkp"
    
    # Poss√≠veis strings de conex√£o (vamos tentar diferentes senhas)
    connection_strings = [
        f"postgresql://postgres:Hi3Imz8kVoevWy+IEhT/UV8y4aQqkMNCYKs3PrNuI2lDnzSJZsj4FtrI7vN/sIqTaC8A/rQwGz8Ka4cqXQEosA==@db.{project_ref}.supabase.co:5432/postgres",
        f"postgresql://postgres@db.{project_ref}.supabase.co:5432/postgres",
    ]
    
    print("üöÄ SG - Servir e Gerir - Configura√ß√£o do Banco de Dados")
    print("=" * 60)
    
    connection = None
    
    for i, conn_str in enumerate(connection_strings, 1):
        try:
            print(f"üîó Tentativa {i}: Conectando ao PostgreSQL do Supabase...")
            connection = psycopg2.connect(conn_str)
            print("‚úÖ Conex√£o estabelecida com sucesso!")
            break
        except Exception as e:
            print(f"‚ùå Tentativa {i} falhou: {str(e)}")
            if i < len(connection_strings):
                print("üîÑ Tentando pr√≥xima configura√ß√£o...")
    
    if not connection:
        print("\n‚ùå N√£o foi poss√≠vel conectar ao banco de dados.")
        print("üìù Vamos usar uma abordagem alternativa - executar o SQL manualmente.")
        print("\nüìã Instru√ß√µes manuais:")
        print("1. Acesse: https://supabase.com/dashboard/project/ncrwipqzshwjbvxgogkp")
        print("2. V√° em 'SQL Editor'")
        print("3. Cole e execute o conte√∫do do arquivo 'database_schema.sql'")
        return False
    
    try:
        cursor = connection.cursor()
        
        # Ler o script SQL
        with open('database_schema.sql', 'r', encoding='utf-8') as file:
            sql_script = file.read()
        
        print("üìã Executando script de cria√ß√£o do banco de dados...")
        
        # Executar o script completo
        cursor.execute(sql_script)
        connection.commit()
        
        print("‚úÖ Script executado com sucesso!")
        
        # Testar a conex√£o fazendo uma consulta simples
        print("\nüß™ Testando tabelas criadas...")
        
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;")
        tables = cursor.fetchall()
        
        print(f"‚úÖ Tabelas criadas: {len(tables)}")
        for table in tables:
            print(f"   üìã {table[0]}")
        
        # Verificar usu√°rio padr√£o
        cursor.execute("SELECT nome, email, nivel_acesso FROM usuarios LIMIT 1;")
        user = cursor.fetchone()
        
        if user:
            print(f"\nüë§ Usu√°rio padr√£o criado: {user[0]} ({user[1]}) - {user[2]}")
        
        print("\nüéâ Banco de dados configurado com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("   1. Execute: python src/main.py")
        print("   2. Acesse: http://localhost:5000")
        print("   3. Login padr√£o: admin@adcs.com / admin123")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar script SQL: {str(e)}")
        return False
    
    finally:
        if connection:
            connection.close()

if __name__ == "__main__":
    if setup_database():
        sys.exit(0)
    else:
        sys.exit(1)

